[
  {
    "name": "IvyAttr",
    "description": "<p>Creates an attribute. Attributes are the core of Ivy, they are observable<br />through the <code>on</code> listener.  Ivy attributes implement both <code>valueOf</code> and<br /><code>toJSON</code>, so they can usually be used like JavaScript primitives.</p>\n\n<pre><code>var a = Ivy.attr(4),\n    b = Ivy.attr(5);\n\nconsole.log(a+b); //=&gt; 9\n</code></pre>",
    "displayName": "IvyAttr()",
    "type": "constructor",
    "id": "IvyAttr"
  },
  {
    "name": "set",
    "description": "<p>Sets the internal value of the attribute.</p>",
    "displayName": "IvyAttr.prototype.set()",
    "type": "method",
    "id": "IvyAttr-set"
  },
  {
    "name": "get",
    "description": "<p>Gets the internal value of the attribute.</p>",
    "displayName": "IvyAttr.prototype.get()",
    "type": "method",
    "id": "IvyAttr-get"
  },
  {
    "name": "on",
    "description": "<p>Adds a listener to the attribute.</p>\n\n<pre><code>var a = Ivy.attr(4);\na.on('change', function(value){ console.log('New value is', value); });\na.set(5); //=&gt; 'New value is 5'\n</code></pre>",
    "displayName": "IvyAttr.prototype.on()",
    "type": "method",
    "id": "IvyAttr-on"
  },
  {
    "name": "off",
    "description": "<p>When given only an event type, stops all listeners for that event.<br />If a callback is given, that callback will be removed.</p>",
    "displayName": "IvyAttr.prototype.off()",
    "type": "method",
    "id": "IvyAttr-off"
  },
  {
    "name": "emit",
    "description": "<p>Emits a named event.</p>",
    "displayName": "IvyAttr.prototype.emit()",
    "type": "method",
    "id": "IvyAttr-emit"
  },
  {
    "name": "valueOf",
    "description": "<p><code>valueOf</code> will return the attribute's internal value, this is useful when<br />doing simple operations on attributes:</p>\n\n<p>Ivy.attr(4) + Ivy.attr(5); //=> 9<br />   Ivy.attr('Hello') + ' World'; //=> 'Hello World'</p>\n\n<h2>Be careful when testing boolean conditions</h2>\n\n<p>Ivy.attr(false) ? 'true' : 'false' //=> 'true'</p>",
    "displayName": "IvyAttr.prototype.valueOf()",
    "type": "method",
    "id": "IvyAttr-valueOf"
  },
  {
    "name": "toJSON",
    "description": "<p><code>toJSON</code> will be called before <code>JSON.stringify</code> is called.  This lets you<br />easily serialize Ivy attributes:</p>\n\n<p>var point = {x: Ivy.attr(3), y: Ivy.attr(7)};<br />   console.log(JSON.stringify(point)); //=> {\"x\":3,\"y\":7}</p>",
    "displayName": "IvyAttr.prototype.toJSON()",
    "type": "method",
    "id": "IvyAttr-toJSON"
  },
  {
    "name": "fn",
    "description": "<p>Creates an computed attribute that is bound to its arguments. If an argument<br />changes, the function will be recomputed.</p>\n\n<p>var price   = Ivy.attr(15),<br />       tax     = Ivy.attr(0.1),<br />       withTax = Ivy.fn(price, tax, function(p,t){<br />         return p * (1 + t);<br />       });</p>\n\n<p>withTax.get(); //=> 16.5<br />   tax.set(0.05);<br />   withTax.get(); //=> 15.75</p>",
    "displayName": "Ivy.fn()",
    "type": "function",
    "id": "Ivy-fn"
  },
  {
    "name": "fnWith",
    "description": "<p>Like <code>Ivy.fn</code>, this creates a bound attribute, but the function binds<br />to the variables named in the function.</p>\n\n<p>function Purchase(price){<br />     this.price = Ivy.attr(price);<br />     this.tax   = Ivy.attr(0.1);<br />     this.withTax = Ivy.fnWith(this, function(price, tax){<br />       return price * (1 + tax);<br />     });<br />   }</p>\n\n<p>var purchase = new Purchase(15);<br />   purchase.withTax.get(); //=> 16.5<br />   purchase.tax.set(0.5);<br />   purchase.withTax.get(); //=> 15.75</p>\n\n<p>When working with complex objects, this is often simpler than using<br /><code>Ivy.fn</code>.</p>",
    "displayName": "Ivy.fnWith()",
    "type": "function",
    "id": "Ivy-fnWith"
  },
  {
    "name": "IvyArray",
    "description": "<p>An <code>IvyArray</code> supports emits events like a normal attribute, but has<br />special methods for adding and removing array elements.</p>\n\n<p>var array = Ivy.array([2,3,4]);<br />   array.get(1); //=> 3<br />   array.get(); //=> [2,3,4]</p>",
    "displayName": "IvyArray()",
    "type": "constructor",
    "id": "IvyArray"
  },
  {
    "name": "set",
    "description": "<p>Set either the entire array to a new value, or a specific<br />array element;</p>\n\n<p>var array = Ivy.array();<br />   array.set([2,3,4]);<br />   array.set(1, \"Hello\");<br />   array.get(); //=> [2,\"Hello\",4]</p>",
    "displayName": "IvyArray.prototype.set()",
    "type": "method",
    "id": "IvyArray-set"
  },
  {
    "name": "get",
    "description": "<p>Gets either the array or an item at the given index.</p>",
    "displayName": "IvyArray.prototype.get()",
    "type": "method",
    "id": "IvyArray-get"
  },
  {
    "name": "push",
    "description": "<p>Pushes an item onto the end of the array.</p>\n\n<p>var array = Ivy.array([1,2,3]);<br />   array.push(4);<br />   array.get(); //=> [1,2,3,4]</p>",
    "displayName": "IvyArray.prototype.push()",
    "type": "method",
    "id": "IvyArray-push"
  },
  {
    "name": "unshift",
    "description": "<p>Pushes an item onto the front of the array.</p>\n\n<p>var array = Ivy.array([1,2,3]);<br />   array.unshift(4);<br />   array.get(); //=> [4,1,2,3]</p>",
    "displayName": "IvyArray.prototype.unshift()",
    "type": "method",
    "id": "IvyArray-unshift"
  },
  {
    "name": "pop",
    "description": "<p>Pops an item off the end of the array.</p>\n\n<p>var array = Ivy.array([1,2,3]);<br />   array.pop(); //=> 3<br />   array.get(); //=> [1,2]</p>",
    "displayName": "IvyArray.prototype.pop()",
    "type": "method",
    "id": "IvyArray-pop"
  },
  {
    "name": "shift",
    "description": "<p>Shifts an item off the front of the array.</p>\n\n<p>var array = Ivy.array([1,2,3]);<br />   array.shift(); //=> 1<br />   array.get(); //=> [2,3]</p>",
    "displayName": "IvyArray.prototype.shift()",
    "type": "method",
    "id": "IvyArray-shift"
  },
  {
    "name": "replace",
    "description": "<p>Replaces the array contents with a new array.</p>\n\n<p>var array = Ivy.array([1,2,3]);<br />   array.replace([4,5,6]);<br />   array.get(); //=> [4,5,6]</p>",
    "displayName": "IvyArray.prototype.replace()",
    "type": "method",
    "id": "IvyArray-replace"
  },
  {
    "name": "remove",
    "description": "<p>Removes an item from the array.</p>\n\n<p>var array = Ivy.array([\"a\", \"b\", \"c\"]);<br />   array.remove(\"b\");<br />   array.get(); //=> [\"a\", \"c\"]</p>",
    "displayName": "IvyArray.prototype.remove()",
    "type": "method",
    "id": "IvyArray-remove"
  },
  {
    "name": "removeEach",
    "description": "<p>Removes any item from the array that matches the function.</p>\n\n<p>var array = Ivy.array([1,2,3,4,5]);<br />   array.removeEach(function(i){ return i % 2; });<br />   array.get(); //=> [1,3,5]</p>",
    "displayName": "IvyArray.prototype.removeEach()",
    "type": "method",
    "id": "IvyArray-removeEach"
  },
  {
    "name": "removeIndex",
    "description": "<p>Removes an item at a given index.</p>\n\n<p>var array = Ivy.array([\"a\", \"b\", \"c\"]);<br />   array.removeIndex(1);<br />   array.get(); //=> [\"a\", \"c\"]</p>",
    "displayName": "IvyArray.prototype.removeIndex()",
    "type": "method",
    "id": "IvyArray-removeIndex"
  },
  {
    "name": "onEach",
    "description": "<p>Registers a listener on each array item as items are added,<br />and unregisters listeners when items are removed from the array.</p>\n\n<p>function Todo(name){<br />     this.name = Ivy.attr(name);<br />     this.isDone = Ivy.attr(false);<br />   }</p>\n\n<p>var todos = Ivy.array();<br />   todos.onEach('change', function(isDone){<br />     console.log('Done state is now', isDone)<br />   }, function(todo){ return todo.isDone });</p>\n\n<p>todos.push(new Todo('Do something great!'));<br />   todos.get(0).isDone.set(true); //=> 'Done state changed'</p>",
    "displayName": "IvyArray.prototype.onEach()",
    "type": "method",
    "id": "IvyArray-onEach"
  },
  {
    "name": "length",
    "description": "<p>Returns the length of the internal array.</p>",
    "displayName": "IvyArray.prototype.length()",
    "type": "method",
    "id": "IvyArray-length"
  },
  {
    "name": "IvyWrap",
    "description": "<p>Wrap an existing attribute with custom getters and setters.<br />The original attribute can still be accessed as normal.</p>\n\n<p>var percent = Ivy.attr(0.1);<br />   var wrapped = Ivy.wrap(percent, {<br />     get: function(num){ return (num * 10) + '%'; },<br />     set: function(val){ return parseFloat(val) / 10; }<br />   });</p>\n\n<p>wrapped.get(); //=> \"10%\"<br />   wrapped.set(\"17%\");<br />   percent.get(); //=> 0.17</p>",
    "displayName": "IvyWrap()",
    "type": "constructor",
    "id": "IvyWrap"
  },
  {
    "name": "get",
    "description": "<p>Gets the internal attribute's value, then passes it through the getter<br />defined with <code>IvyWrap</code></p>",
    "displayName": "IvyWrap.prototype.get()",
    "type": "method",
    "id": "IvyWrap-get"
  },
  {
    "name": "set",
    "description": "<p>Passes the value through the setter, then sets the internal attribute's value.</p>",
    "displayName": "IvyWrap.prototype.set()",
    "type": "method",
    "id": "IvyWrap-set"
  }
]